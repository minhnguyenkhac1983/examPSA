apiVersion: apps/v1
kind: Deployment
metadata:
  name: equilibrium-pricing-service
  namespace: equilibrium
  labels:
    app: equilibrium-pricing-service
    version: v2.0.0
    component: backend
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: equilibrium-pricing-service
  template:
    metadata:
      labels:
        app: equilibrium-pricing-service
        version: v2.0.0
        component: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: equilibrium-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
      - name: pricing-service
        image: equilibrium/pricing-service:v2.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8001
          name: http
          protocol: TCP
        - containerPort: 8002
          name: metrics
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: REDIS_HOST
          valueFrom:
            secretKeyRef:
              name: equilibrium-secrets
              key: redis-host
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: equilibrium-secrets
              key: redis-password
        - name: POSTGRES_HOST
          valueFrom:
            secretKeyRef:
              name: equilibrium-secrets
              key: postgres-host
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_DB
          value: "equilibrium"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: equilibrium-secrets
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: equilibrium-secrets
              key: postgres-password
        - name: KAFKA_BOOTSTRAP_SERVERS
          valueFrom:
            secretKeyRef:
              name: equilibrium-secrets
              key: kafka-bootstrap-servers
        - name: ML_SERVICE_URL
          value: "http://equilibrium-ml-pricing-service:8007"
        - name: GEOSPATIAL_SERVICE_URL
          value: "http://equilibrium-geospatial-service:8003"
        - name: FAILURE_HANDLER_URL
          value: "http://equilibrium-failure-handler-service:8010"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: logs-volume
          mountPath: /app/logs
      volumes:
      - name: config-volume
        configMap:
          name: equilibrium-config
      - name: logs-volume
        emptyDir: {}
      nodeSelector:
        node-type: "compute"
      tolerations:
      - key: "equilibrium.io/pricing"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - equilibrium-pricing-service
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: equilibrium-pricing-service
  namespace: equilibrium
  labels:
    app: equilibrium-pricing-service
    component: backend
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8001"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 8001
    targetPort: 8001
    protocol: TCP
    name: http
  - port: 8002
    targetPort: 8002
    protocol: TCP
    name: metrics
  selector:
    app: equilibrium-pricing-service
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: equilibrium-pricing-service-hpa
  namespace: equilibrium
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: equilibrium-pricing-service
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: equilibrium-pricing-service-pdb
  namespace: equilibrium
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: equilibrium-pricing-service
